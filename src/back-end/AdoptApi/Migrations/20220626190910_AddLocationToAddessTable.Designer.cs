// <auto-generated />
using System;
using AdoptApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace AdoptApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220626190910_AddLocationToAddessTable")]
    partial class AddLocationToAddessTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AdoptApi.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("point");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AdoptApi.Models.Alternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdultAgePenalty")
                        .HasColumnType("int");

                    b.Property<int>("BabyAgePenalty")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FemaleGenderPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LargeSizePenalty")
                        .HasColumnType("int");

                    b.Property<int>("MaleGenderPenalty")
                        .HasColumnType("int");

                    b.Property<int>("MediumSizePenalty")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SeniorAgePenalty")
                        .HasColumnType("int");

                    b.Property<int>("SmallSizePenalty")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Alternatives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 1,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel próprio onde são permitidos animais de estimação.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 1,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel alugado onde são permitidos animais de estimação.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 1,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel próprio ou alugado, mas não sei se animais de estimação são permitidos.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 2,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel próprio onde são permitidos animais de estimação.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 2,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel alugado onde são permitidos animais de estimação.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 2,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Imóvel próprio ou alugado, mas não sei se animais de estimação são permitidos.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 3,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa com área externa (quintal, jardim, etc).",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 10,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 3,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa sem área externa.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 50,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 3,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa com muro baixo.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 20,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 10,
                            QuestionId = 3,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Apartamento com tela.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 25,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 15,
                            QuestionId = 3,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 10,
                            Title = "Apartamento sem tela.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 4,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa com área externa (quintal, jardim, etc).",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 4,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa sem área externa.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 25,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 25,
                            MediumSizePenalty = 0,
                            QuestionId = 4,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Casa com muro baixo.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 4,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Apartamento com tela.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 4,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Apartamento sem tela.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 5,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Por mais de 12 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 10,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 10,
                            MediumSizePenalty = 0,
                            QuestionId = 5,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "De 6 a 12 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 5,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Menos de 6 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 6,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Por mais de 12 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 10,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 10,
                            MediumSizePenalty = 0,
                            QuestionId = 6,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "De 6 a 12 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 6,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Menos de 6 horas ao dia.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 7,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 7,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Há um ou mais pets.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 8,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 8,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Há um ou mais pets.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 9,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 9,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 10,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 10,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 11,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 11,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 12,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 12,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 13,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Ração seca/úmida e/ou alimentos específicos para cachorros.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 13,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sobras de refeições.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 14,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Ração seca/úmida e/ou alimentos específicos para gatos.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 14,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sobras de refeições.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 15,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim, diariamente.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            AdultAgePenalty = 5,
                            BabyAgePenalty = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 20,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 15,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim, de 3 a 5 vezes por semana.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 41,
                            AdultAgePenalty = 10,
                            BabyAgePenalty = 15,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 30,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 15,
                            QuestionId = 15,
                            SeniorAgePenalty = 5,
                            SmallSizePenalty = 10,
                            Title = "Sim, de 1 a 2 vezes por semana.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 42,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 15,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 43,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 16,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 44,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 16,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não, mas comprarei para o pet.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 45,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 20,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 20,
                            MediumSizePenalty = 0,
                            QuestionId = 16,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não, mas não será necessário.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 46,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 17,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 47,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 17,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 48,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 18,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 49,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 18,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 50,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 19,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 51,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 19,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 52,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 0,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 0,
                            MediumSizePenalty = 0,
                            QuestionId = 20,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Sim.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 53,
                            AdultAgePenalty = 0,
                            BabyAgePenalty = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FemaleGenderPenalty = 50,
                            IsActive = true,
                            LargeSizePenalty = 0,
                            MaleGenderPenalty = 50,
                            MediumSizePenalty = 0,
                            QuestionId = 20,
                            SeniorAgePenalty = 0,
                            SmallSizePenalty = 0,
                            Title = "Não.",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AdoptApi.Models.AlternativeNeedPenalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlternativeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NeedId")
                        .HasColumnType("int");

                    b.Property<int>("Penalty")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("NeedId");

                    b.ToTable("AlternativeNeedPenalties");
                });

            modelBuilder.Entity("AdoptApi.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlternativeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Penalties")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("FormId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("AdoptApi.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("AdoptApi.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("AdoptApi.Models.Need", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Needs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Deficiência visual",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Deficiência auditiva",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Deficiência motora",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Doenças transmissíveis",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AdoptApi.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MinScore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("AdoptApi.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("AdoptApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PetType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Eu moro em...",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Eu moro em...",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Meu tipo de residência é...",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Meu tipo de residência é...",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "O pet ficará sozinho?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "O pet ficará sozinho?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Há outros pets em casa?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Há outros pets em casa?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Em caso de viagens, há quem cuide do pet em sua ausência?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Em caso de viagens, há quem cuide do pet em sua ausência?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Está ciente/de acordo com a castração e vacinação?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Está ciente/de acordo com a castração e vacinação?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Como será a alimentação do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Como será a alimentação do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Você pode levar o pet para passear?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Possui caixa de transporte para o pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Está ciente/de acordo dos possíveis contratempos no processo de adaptação do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Está ciente/de acordo dos possíveis contratempos no processo de adaptação do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 0,
                            Title = "Está ciente/de acordo dos possíveis custos na manutenção do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PetType = 1,
                            Title = "Está ciente/de acordo dos possíveis custos na manutenção do pet?",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AdoptApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("PictureId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NeedPet", b =>
                {
                    b.Property<int>("NeedsId")
                        .HasColumnType("int");

                    b.Property<int>("PetsId")
                        .HasColumnType("int");

                    b.HasKey("NeedsId", "PetsId");

                    b.HasIndex("PetsId");

                    b.ToTable("NeedPet");
                });

            modelBuilder.Entity("PetPicture", b =>
                {
                    b.Property<int>("PetsId")
                        .HasColumnType("int");

                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.HasKey("PetsId", "PicturesId");

                    b.HasIndex("PicturesId");

                    b.ToTable("PetPicture");
                });

            modelBuilder.Entity("AdoptApi.Models.Alternative", b =>
                {
                    b.HasOne("AdoptApi.Models.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AdoptApi.Models.AlternativeNeedPenalty", b =>
                {
                    b.HasOne("AdoptApi.Models.Alternative", "Alternative")
                        .WithMany()
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Need", "Need")
                        .WithMany()
                        .HasForeignKey("NeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternative");

                    b.Navigation("Need");
                });

            modelBuilder.Entity("AdoptApi.Models.Answer", b =>
                {
                    b.HasOne("AdoptApi.Models.Alternative", "Alternative")
                        .WithMany()
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Form", "Form")
                        .WithMany("Answers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternative");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("AdoptApi.Models.Form", b =>
                {
                    b.HasOne("AdoptApi.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdoptApi.Models.Pet", b =>
                {
                    b.HasOne("AdoptApi.Models.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdoptApi.Models.User", b =>
                {
                    b.HasOne("AdoptApi.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("AdoptApi.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Document", "Document")
                        .WithOne("User")
                        .HasForeignKey("AdoptApi.Models.User", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.Navigation("Address");

                    b.Navigation("Document");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("NeedPet", b =>
                {
                    b.HasOne("AdoptApi.Models.Need", null)
                        .WithMany()
                        .HasForeignKey("NeedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetPicture", b =>
                {
                    b.HasOne("AdoptApi.Models.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoptApi.Models.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptApi.Models.Address", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptApi.Models.Document", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptApi.Models.Form", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("AdoptApi.Models.Question", b =>
                {
                    b.Navigation("Alternatives");
                });

            modelBuilder.Entity("AdoptApi.Models.User", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
